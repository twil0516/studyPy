#============================================================
# 리스트
#--> 여러개의 값을 집합적으로 저장
#--> 데이터 관리, 보관, 운반 등등의 장점
#--> 요소 (element)
#   --> 리스트에 속한 각각의 값
#       [1,2,3,4,5]
#============================================================
# 평균과 합계
score = [99,80,70,77,66]

Sum = 0
for s in score:
    Sum += s

print("합계 : %d" %Sum)
print("평균 : %2.f" %float(Sum/len(score)))
# 각각의 요소에 접근 index [] 를 통해서 접근 !!
print(score[0])
print(score[1])
# 범위를 지정한 요소 접근 !!

no = [1,2,3,4,5,6,7,8,9]
print(no[0:2])
print(no[:3])
print(no[3:])
print(no[1:7:2]) # 1 ~ 7 2씩 증가

no[0] = 4885 # 요소 1개의 값 변경 !!
print(no)

no2 = [111,222,333]
no[1:4] = no2
print(no)

#============================================================
# 다차원 리스트
#============================================================
map = [ [1,2,3],[4,5,6],[7,8,9] ]

print('map :', map)

print('map[0][0] :',map[0][0])
# 각각의 요소에 접근 for문 2개 필요 !!
for m in map:
    for e in m:
        print("[%d]" %e, end = '')
    print()
#============================================================
# 리스트 초기화 !!
#============================================================
no = [1,2,3,4,5]

num = [n for n in range(1,11) ]
print(num)

num2 = []
print(num2)

for n in range(1,11):
    num2.append(n)
print(num2)

# 중간에 삽입하는 함수
num2.insert(5, 4885)
print(num2)
num2.insert(num2.index(4885)+1, 1234)
print(num2)

# 리스트안에 또다른 리스트 삽입 !!

n1 = [1,2,3,4,5]
n2 = [10,20,30]
n1[0] = [7,8,9]
print(n1) # python의 리스트의 특징 !! 다른 타입의 데이터들로 리스트를 구성 가능 !!
          # 객체지향언어는 부모 클래스가 자식 클래스를 참조 가능하기 때문 !!

# 리스트에서 요소 삭제 !!
# remove : 값을 찾아서 삭제 !!
# del    : 순서값(index)을 찾아서 삭제 !!
# cleare : 전체 삭제
# [] 대입

score = [100, 80, 50, 40, 77, 88]

print(score)
score.remove(100) # 100 삭제 
print(score)
del(score[3])     # index가 3인 데이터 삭제 
print(score)
score[1:3] = []   # 해당범위의 데이터 여러개 삭제 
print(score)
score.clear()     # 전체 데이터 삭제
print(score)

#======================================================
# 리스트 검색 !!
#======================================================
no = [11,22,3,24,4,55,36,7,27]

print(no.index(11))
print(no.count(4))
print(max(no))
print(min(no))

if 8 in no:
    print("있다")
else:
    print("없당")
#======================================================
# sort
# reverse
#======================================================

no.sort() # no 자체가 정렬 
print(no)
no.reverse()
print(no)

no2 = sorted(no) # no 정렬된 상태로 리턴 (복사본)
print(no2)



















